generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  title       String?
  description String?
  date        DateTime? @db.Timestamp(6)
  images      String[]
  city        String?
  province    String?
  barangay    String?
}

model Feedback {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @db.Timestamp(6)
  rating       Float?
  comment      String?
  user_id      String?        @db.Uuid
  place_id     String?        @db.Uuid
  Place        Place?         @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_place_id")
  User         User?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  ReplyComment ReplyComment[]
}

model Footer {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  description String?
}

model Itinerary {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  place_id   String?   @db.Uuid
  user_id    String?   @db.Uuid
  Place      Place?    @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_place_id")
  User       User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model LearnMore {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  images      String[]
  description String?
}

model LoggedInHistory {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)
  refresh_token String?
  user_id       String?   @db.Uuid
  User          User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model Place {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @db.Timestamp(6)
  category     String?
  social_links Json?          @db.Json
  title        String?
  description  String?
  photos       String[]
  contact      String[]
  province     String?
  city         String?
  barangay     String?
  season_id    String?        @db.Uuid
  Feedback     Feedback[]
  Itinerary    Itinerary[]
  Season       Season?        @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_season_id")
  VisitedPlace VisitedPlace[]
}

model User {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @db.Timestamp(6)
  first_name       String
  last_name        String
  gender           String             @db.VarChar(6)
  email            String             @unique
  password         String
  role             role?              @default(REGULAR)
  from_country     String
  current_province String
  current_city     String
  profile_photo    String?
  Feedback         Feedback[]
  Itinerary        Itinerary[]
  ItineraryBuilder ItineraryBuilder[]
  LoggedInHistory  LoggedInHistory[]
  Preferences      Preferences?
  ReplyComment     ReplyComment[]
  VisitedPlace     VisitedPlace[]
}

model VisitedPlace {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  user_id    String?   @db.Uuid
  place_id   String?   @db.Uuid
  Place      Place?    @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_place_id")
  User       User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model ThingToBring {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  images      String[]
  title       String?
  description String?
}

model ThingToAvoid {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  images      String[]
  title       String?
  description String?
}

model ThingToRemember {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  images      String[]
  title       String?
  description String?
}

model LoveOurPlanet {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  title      String?
}

model Preferences {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at             DateTime? @default(now()) @db.Timestamp(6)
  updated_at             DateTime? @db.Timestamp(6)
  preferenced_categories String[]
  user_id                String?   @unique @db.Uuid
  User                   User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userid")
}

model WhereToGo {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  images      String[]
  title       String?
  description String?
}

model ItineraryBuilder {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  place_name  String
  event_date  DateTime  @db.Timestamp(6)
  event_color String
  event_icon  String
  notes       String?
  user_id     String    @db.Uuid
  User        User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model ReplyComment {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)
  reply_comment String?
  user_id       String    @db.Uuid
  feedback_id   String    @db.Uuid
  Feedback      Feedback  @relation(fields: [feedback_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_feedback_id")
  User          User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
}

model Season {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  name        String?   @db.VarChar(255)
  description String?
  from_date   DateTime  @db.Date
  to_date     DateTime  @db.Date
  Place       Place[]
}

enum role {
  ADMIN
  REGULAR
  SUPER_ADMIN @map("SUPER-ADMIN")
}
